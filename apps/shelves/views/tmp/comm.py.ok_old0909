#!/usr/bin/env python
#-*- coding: utf-8 -*-
from django.http import HttpResponse,HttpResponseRedirect
from django.shortcuts import render_to_response,RequestContext
from django.contrib.auth.decorators import login_required
from django.db.models import Q
from apps.usermanage.views.permission import PermissionVerify
from apps.workorder.models import IDCList, SpareBrandList, ModelList
from apps.shelves.models import CheckCount, StandardData, CheckFailData
from plugins.myclass.shelves_models import StandardDataOb, CheckFailDataOb
from plugins.apps.shelves import check_data
from datetime import date
import requests
import sys
import json
import re
import time
import datetime
import logging


reload(sys)
sys.setdefaultencoding('utf8')
logger = logging.getLogger('shelves')

def shelvesCheckOK(request):
    idate = time.strftime("%Y-%m-%d",time.localtime(time.time()))
    year = int(idate.split('-')[0])
    month = int(idate.split('-')[1])
    day = int(idate.split('-')[2])
    result = StandardData.objects.filter(std_check_ok = 1, std_update__gt = date(year,month,day))
    response_data = [ {"sn":x.std_sn,"status":x.std_check_ok} for x in result ]
    kwvars = {
        'request':request,
        'title':'工单系统-基础信息-机房信息列表',
        'body':'1',
    }
    return HttpResponse(json.dumps(response_data), content_type="application/json")  

@login_required
@PermissionVerify()
def shelvesHelp(request):
    kwvars = {
        'request':request,
        'title':'上架验收-帮助',
        #'postUrl':'/workorder/idc/list/',
    }
    return render_to_response('shelves/help.html',kwvars,RequestContext(request))

@login_required
@PermissionVerify()
def shelvesCheckCount(request):
    







    kwvars = {
        'request':request,
        'title':'上架验收-统计查询',
    }
    return render_to_response('shelves/checkcount.html',kwvars,RequestContext(request))

@login_required
@PermissionVerify()
def shelvesHome(request):
    action = request.GET.get("action")
    start = time.time()
    role = request.user.role.role_en
    username = request.user.username
    idcs = request.POST.getlist("idc")
    brands = request.POST.getlist("brand")
    allidcs = IDCList.objects.filter(idc_enable = True )
    allbrands = SpareBrandList.objects.filter(brand_enable = True )
    imonth = time.strftime("%Y-%m",time.localtime(time.time()))
    idate = time.strftime("%Y-%m-%d",time.localtime(time.time()))
    year = int(idate.split('-')[0])
    month = int(idate.split('-')[1])
    day = int(idate.split('-')[2])
    cab_api="http://10.136.130.232/net/info"
    fac_api="http://10.142.113.58/check/purchase/index.php?act=data&p=purchase-{imonth}".format(imonth = imonth)
    std_api="http://roc.sogou/pandora/srv_online/loadInterfaceShelvesCheck?type=purchase"
    result_nodata = {}
    result_fail = {}
    result_ok = {}
    result = {"nodata":result_nodata, "fail":result_fail, "ok":result_ok}
    idc_count = {}
    model_count = {}
    brand_count = {}
    try:
        cab_str = requests.request('GET', cab_api).text
        cab = json.loads(cab_str)
    except Exception,ex:
        print 'cab_str:',ex
        cab_str = "{}"
        cab = json.loads(cab_str)
    try:
        fac_str = requests.request('GET', fac_api).text
        fac_json = json.loads(fac_str)
        fac_fp = open("fac.txt","r")
        lines = fac_fp.readlines()[0]
        fac_json = json.loads(lines)
    except Exception,ex:
        print 'fac_str:',ex
        fac_str = "{}"
        fac = json.loads(fac_str)

    fac = {}
    if fac_json:
        for item in fac_json.values():
            t_fac = {}
            t_item = json.loads(json.loads(item)["val"])
            sn = json.loads(item)["s"]
            t_fac["cpu"] = t_item["cpu"]
            t_fac["model"] = t_item["manu"]
            t_fac["create_raid"] = t_item["create_raid"]
            t_fac["mem"] = t_item["mem"]
        
            #mtype-interface-size-rpm-inch
            disks = t_item["disk"].split('&')
            p_result = {}
            pattern = re.compile(".*interface:(.*?);.*size:(.*?);.*rpm:(.*?);.*inch:(.*?);.*mtype:(.*?);")
            p_result = {}
            for item in disks:
                try:
                    t_result = pattern.match(item)
                    item = t_result.expand(r'\5-\1-\2G-\3-\4')
                    if item not in p_result.keys():
                        p_result[item] = 0
                    p_result[item] = p_result[item]+1
                except Exception,ex:
                    pass
                    #print 'disks:',ex
            t_fac["disk"] = p_result
            #print t_fac["machine_type"],p_result
            try:
                nics = t_item["netcard"].split('&')
                p_result = {}
                pattern = re.compile(".*model:(.*?);")
                for item in nics:
                    t_result = pattern.match(item)
                    item = t_result.expand(r'\1')
                    item = item.split('-')
                    item.insert(-1,'IN-CI')
                    item = '-'.join(item)
                    if item not in p_result.keys():
                        p_result[item] = 0
                    p_result[item] = p_result[item]+1 
            except Exception,ex:
                print 'nics:',ex
                p_result = {}
            t_fac["netcard"] = p_result

            # ilo_stat
            pattern = re.compile(".*ilo_auth=(\w+)")
            try:
                t_result = pattern.match(t_item["machine"])
                p_result = t_result.expand(r'\1')
            except:
                p_result = "err"
            t_fac["ilo_stat"] = p_result

            # ilo_ip
            pattern = re.compile(".*ilo_ip=(.*?)&")
            try:
                t_result = pattern.match(t_item["machine"])
                p_result = t_result.expand(r'\1')
            except:
                p_result = "err"
            t_fac["ilo_ip"] = p_result
            t_fac["mac0"] = t_item["mac"]["mac0"]
            t_fac["mac1"] = t_item["mac"]["mac1"]

            # power_num
            pattern = re.compile(".*power_num=(\d+)")
            try:
                t_result = pattern.match(t_item["machine"])
                p_result = t_result.expand(r'\1')
            except:
                p_result = "0"
            t_fac["power"] = p_result
            for item in cab.keys():
                if "cable1" in t_fac.keys() and "cable0" in t_fac.keys():break
                if t_fac["mac0"] in cab[item]:
                    #print item,t_fac["mac0"],cab[item]
                    t_fac["cable0"] = item
                    continue
                if t_fac["mac1"] in cab[item]:
                    #print item,t_fac["mac1"],cab[item]
                    t_fac["cable1"] = item
                    continue
            else:
                if "cable0" not in t_fac.keys(): t_fac["cable0"] = ""
                if "cable1" not in t_fac.keys(): t_fac["cable1"] = ""
            #print 'fac',sn,t_fac["cable0"],t_fac["cable1"]
            fac[sn] = t_fac

    # get std from db
    std_db = StandardData.objects.filter(std_date = idate )
    # if std_db not exist, get from url and insert to db
    if not std_db or action == "update":
        std = {}
        try:
            std_str = requests.request('GET', std_api).text
            std_json = json.loads(std_str)
            std_fp = open("std.txt","r")
            lines = std_fp.readlines()[0]
            std_json = json.loads(lines)
            for item in std_json:
                # ilo_ip,cable0,cable1
                for ip_item in std_json[item]["ip_detail"]:
                    if ip_item["eth"] == "ethilo":
                        std_ilo = ip_item["ip"]
                    elif ip_item["eth"] == "eth0":
                        std_cable0 = ip_item["cable_id"]
                    elif ip_item["eth"] == "eth1":
                        std_cable1 = ip_item["cable_id"]
                # mem
                std_mems = std_json[item]["mem"].split('+')
                std_mems = [ x.split('-')[-1] for x in std_mems]
                std_mem = '+'.join(std_mems)
                std_sn = item
                std[std_sn] = {}
                std[std_sn]["idate"] = idate
                std[std_sn]["sn"] = std_json[item]["sn"]
                std[std_sn]["batch"] = std_json[item]["batch"]
                std[std_sn]["model"] = std_json[item]["machine_type"]
                std[std_sn]["idc"] = std_json[item]["idc"]
                std[std_sn]["rack_id"] = std_json[item]["rack_id"]
                std[std_sn]["ilo_ip"] = std_ilo
                std[std_sn]["cpu"] = std_json[item]["cpu"]
                std[std_sn]["mem"] = std_mem
                std[std_sn]["disk"] = std_json[item]["disk"]
                std[std_sn]["netcard"] = std_json[item]["netcard"]
                std[std_sn]["nic_speed"] = "speed"
                std[std_sn]["power"] = std_json[item]["power"]
                std[std_sn]["raid"] = "ok" # 标准值 
                std[std_sn]["mac0"] = std_json[item]["mac"]["eth0"]
                std[std_sn]["mac1"] = std_json[item]["mac"]["eth1"]
                std[std_sn]["cable0"] = std_cable0
                std[std_sn]["cable1"] = std_cable1
                std[std_sn]["ilo"] = "ok" # 标准值
                std[std_sn]["real_exist"] = "empty"
                std[std_sn]["onetime_pass"] = "empty"
                flag = StandardData.objects.filter(std_sn = std_sn )
                model_en = ' '.join(std[std_sn]["model"].split(' ')[1:])
                id_model = ModelList.objects.get(model_en = model_en)
                idc_en = std[std_sn]["idc"]
                id_idc = IDCList.objects.get(idc_en = idc_en)
                if flag:
                    flag, desc = StandardDataOb().upall(std_sn = std_sn,id_idc = id_idc,
                                                      id_model = id_model, std_rack_id = std[std_sn]["rack_id"],
                                                      std_ilo_ip = std[std_sn]["ilo_ip"], std_cpu = std[std_sn]["cpu"],
                                                      std_mem = std[std_sn]["mem"], std_disk = std[std_sn]["disk"],
                                                      std_nic = std[std_sn]["netcard"], std_nic_speed = std[std_sn]["nic_speed"],
                                                      std_power = std[std_sn]["power"], std_mac0 = std[std_sn]["mac0"],
                                                      std_mac1 = std[std_sn]["mac1"], 
                                                      std_cable0 = std[std_sn]["cable0"], std_cable1 = std[std_sn]["cable1"])
                else:
                    flag, desc = StandardDataOb().new(std_sn = std_sn, std_batch = std[std_sn]["batch"], id_idc = id_idc,
                                                      id_model = id_model, std_rack_id = std[std_sn]["rack_id"],
                                                      std_ilo_ip = std[std_sn]["ilo_ip"], std_cpu = std[std_sn]["cpu"],
                                                      std_mem = std[std_sn]["mem"], std_disk = std[std_sn]["disk"],
                                                      std_nic = std[std_sn]["netcard"], std_nic_speed = std[std_sn]["nic_speed"],
                                                      std_power = std[std_sn]["power"], std_mac0 = std[std_sn]["mac0"],
                                                      std_mac1 = std[std_sn]["mac1"], 
                                                      std_cable0 = std[std_sn]["cable0"], std_cable1 = std[std_sn]["cable1"])
                if flag is True:
                    logger.info("StandardData:success:[%s]%s\nDetail:%s" %(std[std_sn]["batch"],std_sn,desc))
                else:
                    logger.error("StandardData:fail:[%s]%s\nError Log:%s" %(std[std_sn]["batch"],std_sn,desc))
                #if not std_db:
                #    print "insert"
                #else:
                #    flag = StandardData.objects.filter(std_sn = std_sn )
                #    if flag: 
                #        print "update"
                #    else:
                #        print "insert"
        except Exception,ex:
            print 'std_str:',ex
            std_str = "{}"
            std = json.loads(std_str)
        
    # get std from db ( currentdate and check_fail )
    idate_dt = date(year, month, day)
    #std_db = StandardData.objects.filter(Q(std_date = idate_dt) | Q(std_check_ok = 0) | Q(std_update = idate_dt))
    #std_db = StandardData.objects.filter(Q(std_update__gt = idate_dt))
    std_db = StandardData.objects.filter(Q(std_check_ok = 0) | Q(std_update__gt = idate_dt))
    std = {}
    for item in std_db:
        std_sn = item.std_sn
        std[std_sn] = {}
        std[std_sn]["idate"] = item.std_date
        std[std_sn]["sn"] = item.std_sn
        std[std_sn]["batch"] = item.std_batch
        std[std_sn]["model"] = "{brand} {model}".format(brand=item.id_model.id_brand.brand_en, model = item.id_model.model_en)
        std[std_sn]["rack_id"] = item.std_rack_id
        try:
            std[std_sn]["idc"] = item.id_idc.idc_en
        except:
            std[std_sn]["idc"] = "NULL"
        std[std_sn]["ilo_ip"] = item.std_ilo_ip
        std[std_sn]["cpu"] = item.std_cpu
        std[std_sn]["mem"] = item.std_mem
        std[std_sn]["disk"] = item.std_disk
        std[std_sn]["netcard"] = item.std_nic
        std[std_sn]["nic_speed"] = item.std_nic_speed
        std[std_sn]["power"] = item.std_power
        std[std_sn]["raid"] = item.std_raid
        std[std_sn]["mac0"] = item.std_mac0
        std[std_sn]["mac1"] = item.std_mac1
        std[std_sn]["cable0"] = item.std_cable0
        std[std_sn]["cable1"] = item.std_cable1
        std[std_sn]["ilo"] = item.std_ilo_st
        std[std_sn]["real_exist"] = item.std_real_exist
        std[std_sn]["onetime_pass"] = item.std_onetime_pass
    
    for item in std:
        brand = std[item]["model"].split(" ")[0]
        idc = std[item]["idc"]
        if brand == "Lenovo" and ( username == "Lenovo" or username == "surecoteam" ):
            if std[item]["idc"] in idcs or not idcs:
                if idc not in idc_count.keys():
                    idc_count[idc] = {}
                    idc_count[idc]["sum"] = 0
                    idc_count[idc]["ok"] = 0
                    idc_count[idc]["fail"] = 0
                if brand not in brand_count.keys():
                    brand_count[brand] = {}
                    brand_count[brand]["sum"] = 0
                    brand_count[brand]["ok"] = 0
                    brand_count[brand]["fail"] = 0
                brand_count[brand]["sum"] = brand_count[brand]["sum"] +1
                idc_count[idc]["sum"] = idc_count[idc]["sum"]+1
                brand_count[brand]["sum"] = brand_count[brand]["sum"] +1
                t_result = check_data(item,fac,std) 
                if t_result["stat"] == "nodata":
                    result_nodata[item] = t_result
                    brand_count[brand]["fail"] = brand_count[brand]["fail"] +1
                    idc_count[idc]["fail"] = idc_count[idc]["fail"]+1
                elif t_result["stat"] == "ok":
                    if not std[item]["std_real_exist"]:
                        # update db, onetime_pass = True
                        StandardData.objects.filter(std_sn = std[item]["sn"]).update(std_onetime_pass = 1)
                    # update db,check_status = True
                    StandardData.objects.filter(std_sn = std[item]["sn"]).update(std_check_ok = 1)
                    # update db,realdata_status = True
                    StandardData.objects.filter(std_sn = std[item]["sn"]).update(std_real_exist = 1)
                    result_ok[item] = t_result
                    brand_count[brand]["ok"] = brand_count[brand]["ok"] +1
                    idc_count[idc]["ok"] = idc_count[idc]["ok"]+1
                else:
                    # update db,realdata_status = True
                    StandardData.objects.filter(std_sn = std[item]["sn"]).update(std_real_exist = 1)
                    result_fail[item] = t_result
                    brand_count[brand]["fail"] = brand_count[brand]["fail"] +1
                    idc_count[idc]["fail"] = idc_count[idc]["fail"]+1
        elif brand != "Lenovo" and ( username == "Dell" or username == "dcitsteam" ):
            if std[item]["idc"] in idcs or not idcs:
                if brand not in brand_count.keys():
                    brand_count[brand] = {}
                    brand_count[brand]["sum"] = 0
                    brand_count[brand]["ok"] = 0
                    brand_count[brand]["fail"] = 0
                if idc not in idc_count.keys():
                    idc_count[idc] = {}
                    idc_count[idc]["sum"] = 0
                    idc_count[idc]["ok"] = 0
                    idc_count[idc]["fail"] = 0
                brand_count[brand]["sum"] = brand_count[brand]["sum"] +1
                idc_count[idc]["sum"] = idc_count[idc]["sum"]+1
                t_result = check_data(item,fac,std) 
                #print 'dell'
                #result[item] = t_result
                if t_result["stat"] == "nodata":
                    result_nodata[item] = t_result
                    brand_count[brand]["fail"] = brand_count[brand]["fail"] +1
                    idc_count[idc]["fail"] = idc_count[idc]["fail"]+1
                elif t_result["stat"] == "ok":
                    if not std[item]["std_real_exist"]:
                        # update db, onetime_pass = True
                        StandardData.objects.filter(std_sn = std[item]["sn"]).update(std_onetime_pass = 1)
                    # update db,check_status = True
                    StandardData.objects.filter(std_sn = std[item]["sn"]).update(std_check_ok = 1)
                    # update db,realdata_status = True
                    StandardData.objects.filter(std_sn = std[item]["sn"]).update(std_real_exist = 1)
                    result_ok[item] = t_result
                    brand_count[brand]["ok"] = brand_count[brand]["ok"] +1
                    idc_count[idc]["ok"] = idc_count[idc]["ok"]+1
                else:
                    # update db,realdata_status = True
                    StandardData.objects.filter(std_sn = std[item]["sn"]).update(std_real_exist = 1)
                    result_fail[item] = t_result
                    brand_count[brand]["fail"] = brand_count[brand]["fail"] +1
                    idc_count[idc]["fail"] = idc_count[idc]["fail"]+1
        elif role == "Admin" or role == "sogouer":
            if idc in idcs or not idcs:
                if brand in brands or not brands:
                    if brand not in brand_count.keys():
                        brand_count[brand] = {}
                        brand_count[brand]["sum"] = 0
                        brand_count[brand]["ok"] = 0
                        brand_count[brand]["fail"] = 0
                    if idc not in idc_count.keys():
                        idc_count[idc] = {}
                        idc_count[idc]["sum"] = 0
                        idc_count[idc]["ok"] = 0
                        idc_count[idc]["fail"] = 0
                    brand_count[brand]["sum"] = brand_count[brand]["sum"] +1
                    idc_count[idc]["sum"] = idc_count[idc]["sum"]+1
                    t_result = check_data(item,fac,std) 
                    #print 'sogouer'
                    #result[item] = t_result
                    if t_result["stat"] == "nodata":
                        result_nodata[item] = t_result
                        brand_count[brand]["fail"] = brand_count[brand]["fail"] +1
                        idc_count[idc]["fail"] = idc_count[idc]["fail"]+1
                    elif t_result["stat"] == "ok":
                        if not std[item]["std_real_exist"]:
                            # update db, onetime_pass = True
                            StandardData.objects.filter(std_sn = std[item]["sn"]).update(std_onetime_pass = 1)
                        # update db,check_status = True
                        StandardData.objects.filter(std_sn = std[item]["sn"]).update(std_check_ok = 1)
                        # update db,realdata_status = True
                        StandardData.objects.filter(std_sn = std[item]["sn"]).update(std_real_exist = 1)
                        result_ok[item] = t_result
                        brand_count[brand]["ok"] = brand_count[brand]["ok"] +1
                        idc_count[idc]["ok"] = idc_count[idc]["ok"]+1
                    else:
                        # update db,realdata_status = True
                        StandardData.objects.filter(std_sn = std[item]["sn"]).update(std_real_exist = 1)
                        result_fail[item] = t_result
                        brand_count[brand]["fail"] = brand_count[brand]["fail"] +1
                        idc_count[idc]["fail"] = idc_count[idc]["fail"]+1
    kwvars = {
        'request':request,
        'result': result,
        'idc_count': idc_count,
        'brand_count': brand_count,
        'idcs': idcs,
        'allidcs': allidcs,
        'brands': brands,
        'allbrands': allbrands,
        'title':'工单系统-基础信息-机房信息列表',
        #'postUrl':'/workorder/idc/list/',
    }
    return render_to_response('shelves/index.html',kwvars,RequestContext(request))
