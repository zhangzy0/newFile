#!/usr/bin/env python
#-*- coding: utf-8 -*-
from django.http import HttpResponse,HttpResponseRedirect
from django.shortcuts import render_to_response,RequestContext
from django.contrib.auth.decorators import login_required
from django.db.models import Q
from apps.usermanage.views.permission import PermissionVerify
from apps.workorder.models import IDCList, SpareBrandList, ModelList
from apps.shelves.models import CheckCount, StandardData, CheckFailData
from plugins.myclass.shelves_models import StandardDataOb, CheckFailDataOb
#from plugins.apps.shelves import each_count, std_json2dic, std_db2dic, fac_json2dic, resultCount
from plugins.apps.shelves import each_count, std_db2dic, fac_json2dic, resultCount
from datetime import date
import requests
import sys
import json
import re
import time
import datetime
import logging


reload(sys)
sys.setdefaultencoding('utf8')
logger = logging.getLogger('shelves')

def shelvesCheckOK(request):
    idate = time.strftime("%Y-%m-%d",time.localtime(time.time()))
    year = int(idate.split('-')[0])
    month = int(idate.split('-')[1])
    day = int(idate.split('-')[2])
    result = StandardData.objects.filter(std_check_ok = 1, std_update__gt = date(year,month,day))
    response_data = [ {"sn":x.std_sn,"status":x.std_check_ok} for x in result ]
    kwvars = {
        'request':request,
        'title':'工单系统-基础信息-机房信息列表',
        'body':'1',
    }
    return HttpResponse(json.dumps(response_data), content_type="application/json")  

@login_required
@PermissionVerify()
def shelvesHelp(request):
    kwvars = {
        'request':request,
        'title':'上架验收-帮助',
        #'postUrl':'/workorder/idc/list/',
    }
    return render_to_response('shelves/help.html',kwvars,RequestContext(request))

@login_required
@PermissionVerify()
def shelvesCheckCount(request):
    







    kwvars = {
        'request':request,
        'title':'上架验收-统计查询',
    }
    return render_to_response('shelves/checkcount.html',kwvars,RequestContext(request))

@login_required
@PermissionVerify()
def shelvesHome2(request):
    url = "http://10.134.35.53/api/web.php?batch=purchase-{year_month}".format(year_month = "2016-10")
    body = requests.get(url)
    kwvars = {
        'request':request,
        'body': body.text,
        'title':'工单系统-基础信息-机房信息列表',
        #'postUrl':'/workorder/idc/list/',
    }
    return render_to_response('shelves/index2.html',kwvars,RequestContext(request))


@login_required
@PermissionVerify()
def shelvesHome(request):
    start = time.time()
    print 'start'
    action = request.GET.get("action")
    role = request.user.role.role_en
    username = request.user.username
    idcs = request.POST.getlist("idc")
    brands = request.POST.getlist("brand")
    allidcs = IDCList.objects.filter(idc_enable = True )
    allbrands = SpareBrandList.objects.filter(brand_enable = True )
    imonth = time.strftime("%Y-%m",time.localtime(time.time()))
    idate = time.strftime("%Y-%m-%d",time.localtime(time.time()))
    year = int(idate.split('-')[0])
    month = int(idate.split('-')[1])
    day = int(idate.split('-')[2])
    cab_api="http://10.136.130.232/net/info"
    fac_api="http://10.142.113.58/check/purchase/index.php?act=data&p=purchase-{imonth}".format(imonth = imonth)
    std_api="http://roc.sogou/pandora/srv_online/loadInterfaceShelvesCheck?type=purchase"
    result_nodata = {}
    result_fail = {}
    result_ok = {}
    result_count = {}
    try:
        fac_str = requests.request('GET', fac_api).text
        fac_json = json.loads(fac_str)
        if str(fac_json) == "f":
            print 'error'
            raise TypeError
        fac_fp = open("fac.txt","r")
        lines = fac_fp.readlines()[0]
        fac_json = json.loads(lines)
    except Exception,ex:
        print 'fac_str:',ex
        fac_str = "{}"
        fac_json = json.loads(fac_str)
    print time.time()-start,'end getfac data',time.time()


    try:
        cab_str = requests.request('GET', cab_api).text
        cab = json.loads(cab_str)
    except Exception,ex:
        print 'cab_str:',ex
        cab_str = "{}"
        cab = json.loads(cab_str)
    print time.time()-start,'end getcab data',time.time()

    fac = {}
    if fac_json:
        for item in fac_json.values():
            t_fac = fac_json2dic(item = item,cab = cab)
            sn = json.loads(item)["s"]
            fac[sn] = t_fac
    print time.time()-start,'end fac2dic',time.time()

    # get std from db
    std_db = StandardData.objects.filter(std_date = idate )
    print time.time()-start,'end getstd from db',time.time()
    # if std_db not exist, get from url and insert to db
    if not std_db or action == "update":
        print time.time()-start,'start getstd data',time.time()
        try:
            std_str = requests.request('GET', std_api).text
            std_json = json.loads(std_str)
        except Exception,ex:
            print "std_str:",ex
            std_str = "{}"
            std_json = json.loads(std_str)
        print time.time()-start,'end getstd data',time.time()
        try:
            for item in std_json:
                std_sn = item
                batch = std_json[item]["batch"]
                rack_id = std_json[item]["rack_id"]
                # mem
                std_mems = std_json[item]["mem"].split('+')
                std_mems = [ x.split('-')[-1] for x in std_mems]
                mem = '+'.join(std_mems)
                # cpu
                cpu = std_json[item]["cpu"]
                # disk
                disk = std_json[item]["disk"]
                netcard = std_json[item]["netcard"]
                nic_speed = "speed"
                power = std_json[item]["power"]
                # ilo_ip,cable0,cable1
                for ip_item in std_json[item]["ip_detail"]:
                    if ip_item["eth"] == "ethilo":
                        std_ilo = ip_item["ip"]
                    elif ip_item["eth"] == "eth0":
                        std_cable0 = ip_item["cable_id"]
                    elif ip_item["eth"] == "eth1":
                        std_cable1 = ip_item["cable_id"]
                try:
                    ilo_ip = std_ilo
                except Exception,ex:
                    ilo_ip = ""
                try:
                    cable0 = std_cable0
                except Exception,ex:
                    cable0 = ""
                try:
                    cable1 = std_cable1
                except Exception,ex:
                    cable1 = ""
                mac0 = std_json[item]["mac"]["eth0"]
                mac1 = std_json[item]["mac"]["eth1"]
                flag = StandardData.objects.filter(std_sn = std_sn )
                model_en = ' '.join(std_json[item]["model"].split(' ')[1:])
                id_model = ModelList.objects.get(model_en = model_en)
                idc_en = std_json[item]["idc"]
                id_idc = IDCList.objects.get(idc_en = idc_en)
                if flag:
                    flag, desc = StandardDataOb().upall(std_sn = std_sn,id_idc = id_idc,id_model = id_model, std_rack_id = rack_id,
                                                      std_ilo_ip = ilo_ip, std_cpu = cpu,std_mem = mem, std_disk = disk,
                                                      std_nic = netcard, std_nic_speed = nic_speed,std_power = power, 
                                                      std_mac0 = mac0,std_mac1 = mac1,std_cable0 = cable0, std_cable1 = cable1)
                else:
                    flag, desc = StandardDataOb().new(std_sn = std_sn, std_batch = batch, id_idc = id_idc,
                                                      id_model = id_model, std_rack_id = rack_id, std_ilo_ip = ilo_ip, std_cpu = cpu,
                                                      std_mem = mem, std_disk = disk, std_nic = netcard, std_nic_speed = nic_speed,
                                                      std_power = power, std_mac0 = mac0, std_mac1 = mac1, 
                                                      std_cable0 = cable0, std_cable1 = cable1)
                if flag is True:
                    logger.info("StandardData:success:[%s]%s\nDetail:%s" %(batch,std_sn,desc))
                else:
                    logger.error("StandardData:fail:[%s]%s\nError Log:%s" %(batch,std_sn,desc))

        except Exception,ex:
            print 'insert std_str to db:',ex
    print time.time()-start,'end insertdb std',time.time()
    # get std from db ( currentdate and check_fail )
    idate_dt = date(year, month, day)
    std_db = StandardData.objects.filter(Q(std_check_ok = 0) | Q(std_check_ok = 2) | Q(std_update__gt = idate_dt))
    print time.time()-start,'end getstd_fromdb',time.time()
    std = {}
    for item in std_db:
        std_sn = item.std_sn
        #t_std = std_db2dic(item = item)
        std[std_sn] = item
    print time.time()-start,'end std2dic',time.time()
    
    # std_check_ok
    # 0:nodata,1:ok,2:fail
    print 'len',len(std)
    for item in std.values():
        pass
        #id_model = item.id_model
        #id_brand = id_model.id_brand
        #brand = id_brand.brand_en
        #id_idc = std[item].id_idc
        #idc = id_idc.idc_en
        #batch = std[item].std_batch
        #if brand == "Lenovo" and ( username == "Lenovo" or username == "surecoteam" ):
        #    if std[item]["idc"] in idcs or not idcs:
        #        if std[item].std_check_ok == 1:
        #            result_count = resultCount(result_count,batch,idc,brand,"ok")
        #        elif item not in fac:    
        #            result_count = resultCount(result_count,batch,idc,brand,"fail")
        #        else:
        #            pass
        #            #result_count = each_count(result_count = result_count, fac_item = fac[item], std_item = std[item], item = item, batch = batch, idc = idc, brand = brand)
        #elif brand != "Lenovo" and ( username == "Dell" or username == "dcitsteam" ):
        #    if std[item]["idc"] in idcs or not idcs:
        #        if std[item].std_check_ok == 1:
        #            result_count = resultCount(result_count,batch,idc,brand,"ok")
        #        elif item not in fac:    
        #            result_count = resultCount(result_count,batch,idc,brand,"fail")
        #        else:    
        #            #result_count = each_count(result_count = result_count, fac_item = fac[item], std_item = std[item], item = item, batch = batch, idc = idc, brand = brand)
        #            pass
        #elif role == "Admin" or role == "sogouer":
        #    if idc in idcs or not idcs:
        #        if brand in brands or not brands:
        #            if std[item].std_check_ok == 1:
        #                result_count = resultCount(result_count,batch,idc,brand,"ok")
        #            elif item not in fac:    
        #                result_count = resultCount(result_count,batch,idc,brand,"fail")
        #            else:    
        #                #result_count = each_count(result_count = result_count, fac_item = fac[item], std_item = std[item], item = item, batch = batch, idc = idc, brand = brand)
        #                pass
    print time.time()-start,'end check'
    # select data from db
    #    if tmp_nodata:
    #        result_nodata = dict(result_nodata, **tmp_nodata )
    #    if tmp_fail:result_fail = dict( result_fail, **tmp_fail )
    #    if tmp_ok:result_ok = dict( result_ok, **tmp_ok )
    for item in result_count:
        result_count[item]["fail_sum"] = 0
        for iitem in result_count[item]["idc_count"]:
            result_count[item]["fail_sum"] += result_count[item]["idc_count"][iitem]["fail"]
    result = {"nodata":result_nodata, "fail":result_fail, "ok":result_ok}
    print time.time()-start,'end'
        
    kwvars = {
        'request':request,
        'result': result,
        'result_count': result_count,
        'idcs': idcs,
        'allidcs': allidcs,
        'brands': brands,
        'allbrands': allbrands,
        'title':'工单系统-基础信息-机房信息列表',
        #'postUrl':'/workorder/idc/list/',
    }
    return render_to_response('shelves/index.html',kwvars,RequestContext(request))


